{
  // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
  "include": ["src", "types"],
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "es2015",
    "target": "es2015",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "declaration": true,
    "noImplicitAny": false,
    "isolatedModules": false,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "importHelpers": true,
    // output .d.ts declaration files for consumers
    // output .js.map sourcemap files for consumers
    "sourceMap": true,
    // match output dir to input dir. e.g. dist/index instead of dist/src/index
    "rootDir": "./src",
    // stricter type-checking for stronger correctness. Recommended by TS
    // linter checks for common issues
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    // noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
    "noUnusedLocals": true,
    "noUnusedParameters": false,
    // use Node's module resolution algorithm, instead of the legacy TS one
    // transpile JSX to React.createElement
    // interop between ESM and CJS modules. Recommended by TS
    // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
    // error out if import and file system have a casing mismatch. Recommended by TS
    "forceConsistentCasingInFileNames": true,
    "baseUrl": "./",
    // `tsdx build` ignores this option, but it is commonly used when type-checking separately with `tsc`
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": []
  },
  "exclude": ["node_modules", "./node_modules", "./node_modules/*"]
}
